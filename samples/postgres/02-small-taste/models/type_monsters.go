// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/sqlboiler/v4/types/pgeo"
	"github.com/volatiletech/strmangle"
)

// TypeMonster is an object representing the database table.
type TypeMonster struct {
	ID               int                `boil:"id" json:"id" toml:"id" yaml:"id"`
	EnumUse          string             `boil:"enum_use" json:"enum_use" toml:"enum_use" yaml:"enum_use"`
	BoolZero         null.Bool          `boil:"bool_zero" json:"bool_zero,omitempty" toml:"bool_zero" yaml:"bool_zero,omitempty"`
	BoolOne          null.Bool          `boil:"bool_one" json:"bool_one,omitempty" toml:"bool_one" yaml:"bool_one,omitempty"`
	BoolTwo          bool               `boil:"bool_two" json:"bool_two" toml:"bool_two" yaml:"bool_two"`
	BoolThree        null.Bool          `boil:"bool_three" json:"bool_three,omitempty" toml:"bool_three" yaml:"bool_three,omitempty"`
	BoolFour         null.Bool          `boil:"bool_four" json:"bool_four,omitempty" toml:"bool_four" yaml:"bool_four,omitempty"`
	BoolFive         bool               `boil:"bool_five" json:"bool_five" toml:"bool_five" yaml:"bool_five"`
	BoolSix          bool               `boil:"bool_six" json:"bool_six" toml:"bool_six" yaml:"bool_six"`
	StringZero       null.String        `boil:"string_zero" json:"string_zero,omitempty" toml:"string_zero" yaml:"string_zero,omitempty"`
	StringOne        null.String        `boil:"string_one" json:"string_one,omitempty" toml:"string_one" yaml:"string_one,omitempty"`
	StringTwo        string             `boil:"string_two" json:"string_two" toml:"string_two" yaml:"string_two"`
	StringThree      null.String        `boil:"string_three" json:"string_three,omitempty" toml:"string_three" yaml:"string_three,omitempty"`
	StringFour       string             `boil:"string_four" json:"string_four" toml:"string_four" yaml:"string_four"`
	StringFive       null.String        `boil:"string_five" json:"string_five,omitempty" toml:"string_five" yaml:"string_five,omitempty"`
	StringSix        null.String        `boil:"string_six" json:"string_six,omitempty" toml:"string_six" yaml:"string_six,omitempty"`
	StringSeven      string             `boil:"string_seven" json:"string_seven" toml:"string_seven" yaml:"string_seven"`
	StringEight      null.String        `boil:"string_eight" json:"string_eight,omitempty" toml:"string_eight" yaml:"string_eight,omitempty"`
	StringNine       string             `boil:"string_nine" json:"string_nine" toml:"string_nine" yaml:"string_nine"`
	StringTen        null.String        `boil:"string_ten" json:"string_ten,omitempty" toml:"string_ten" yaml:"string_ten,omitempty"`
	StringEleven     string             `boil:"string_eleven" json:"string_eleven" toml:"string_eleven" yaml:"string_eleven"`
	NonbyteZero      null.String        `boil:"nonbyte_zero" json:"nonbyte_zero,omitempty" toml:"nonbyte_zero" yaml:"nonbyte_zero,omitempty"`
	NonbyteOne       null.String        `boil:"nonbyte_one" json:"nonbyte_one,omitempty" toml:"nonbyte_one" yaml:"nonbyte_one,omitempty"`
	NonbyteTwo       string             `boil:"nonbyte_two" json:"nonbyte_two" toml:"nonbyte_two" yaml:"nonbyte_two"`
	NonbyteThree     null.String        `boil:"nonbyte_three" json:"nonbyte_three,omitempty" toml:"nonbyte_three" yaml:"nonbyte_three,omitempty"`
	NonbyteFour      string             `boil:"nonbyte_four" json:"nonbyte_four" toml:"nonbyte_four" yaml:"nonbyte_four"`
	NonbyteFive      null.String        `boil:"nonbyte_five" json:"nonbyte_five,omitempty" toml:"nonbyte_five" yaml:"nonbyte_five,omitempty"`
	NonbyteSix       null.String        `boil:"nonbyte_six" json:"nonbyte_six,omitempty" toml:"nonbyte_six" yaml:"nonbyte_six,omitempty"`
	NonbyteSeven     string             `boil:"nonbyte_seven" json:"nonbyte_seven" toml:"nonbyte_seven" yaml:"nonbyte_seven"`
	NonbyteEight     null.String        `boil:"nonbyte_eight" json:"nonbyte_eight,omitempty" toml:"nonbyte_eight" yaml:"nonbyte_eight,omitempty"`
	NonbyteNine      string             `boil:"nonbyte_nine" json:"nonbyte_nine" toml:"nonbyte_nine" yaml:"nonbyte_nine"`
	ByteZero         null.Byte          `boil:"byte_zero" json:"byte_zero,omitempty" toml:"byte_zero" yaml:"byte_zero,omitempty"`
	ByteOne          null.Byte          `boil:"byte_one" json:"byte_one,omitempty" toml:"byte_one" yaml:"byte_one,omitempty"`
	ByteTwo          null.Byte          `boil:"byte_two" json:"byte_two,omitempty" toml:"byte_two" yaml:"byte_two,omitempty"`
	ByteThree        types.Byte         `boil:"byte_three" json:"byte_three" toml:"byte_three" yaml:"byte_three"`
	ByteFour         types.Byte         `boil:"byte_four" json:"byte_four" toml:"byte_four" yaml:"byte_four"`
	BigIntZero       null.Int64         `boil:"big_int_zero" json:"big_int_zero,omitempty" toml:"big_int_zero" yaml:"big_int_zero,omitempty"`
	BigIntOne        null.Int64         `boil:"big_int_one" json:"big_int_one,omitempty" toml:"big_int_one" yaml:"big_int_one,omitempty"`
	BigIntTwo        int64              `boil:"big_int_two" json:"big_int_two" toml:"big_int_two" yaml:"big_int_two"`
	BigIntThree      null.Int64         `boil:"big_int_three" json:"big_int_three,omitempty" toml:"big_int_three" yaml:"big_int_three,omitempty"`
	BigIntFour       int64              `boil:"big_int_four" json:"big_int_four" toml:"big_int_four" yaml:"big_int_four"`
	BigIntFive       null.Int64         `boil:"big_int_five" json:"big_int_five,omitempty" toml:"big_int_five" yaml:"big_int_five,omitempty"`
	BigIntSix        int64              `boil:"big_int_six" json:"big_int_six" toml:"big_int_six" yaml:"big_int_six"`
	IntZero          null.Int           `boil:"int_zero" json:"int_zero,omitempty" toml:"int_zero" yaml:"int_zero,omitempty"`
	IntOne           null.Int           `boil:"int_one" json:"int_one,omitempty" toml:"int_one" yaml:"int_one,omitempty"`
	IntTwo           int                `boil:"int_two" json:"int_two" toml:"int_two" yaml:"int_two"`
	IntThree         null.Int           `boil:"int_three" json:"int_three,omitempty" toml:"int_three" yaml:"int_three,omitempty"`
	IntFour          int                `boil:"int_four" json:"int_four" toml:"int_four" yaml:"int_four"`
	IntFive          null.Int           `boil:"int_five" json:"int_five,omitempty" toml:"int_five" yaml:"int_five,omitempty"`
	IntSix           int                `boil:"int_six" json:"int_six" toml:"int_six" yaml:"int_six"`
	FloatZero        types.NullDecimal  `boil:"float_zero" json:"float_zero,omitempty" toml:"float_zero" yaml:"float_zero,omitempty"`
	FloatOne         types.NullDecimal  `boil:"float_one" json:"float_one,omitempty" toml:"float_one" yaml:"float_one,omitempty"`
	FloatTwo         types.NullDecimal  `boil:"float_two" json:"float_two,omitempty" toml:"float_two" yaml:"float_two,omitempty"`
	FloatThree       types.NullDecimal  `boil:"float_three" json:"float_three,omitempty" toml:"float_three" yaml:"float_three,omitempty"`
	FloatFour        types.NullDecimal  `boil:"float_four" json:"float_four,omitempty" toml:"float_four" yaml:"float_four,omitempty"`
	FloatFive        types.Decimal      `boil:"float_five" json:"float_five" toml:"float_five" yaml:"float_five"`
	FloatSix         types.NullDecimal  `boil:"float_six" json:"float_six,omitempty" toml:"float_six" yaml:"float_six,omitempty"`
	FloatSeven       types.Decimal      `boil:"float_seven" json:"float_seven" toml:"float_seven" yaml:"float_seven"`
	FloatEight       types.NullDecimal  `boil:"float_eight" json:"float_eight,omitempty" toml:"float_eight" yaml:"float_eight,omitempty"`
	FloatNine        types.NullDecimal  `boil:"float_nine" json:"float_nine,omitempty" toml:"float_nine" yaml:"float_nine,omitempty"`
	ByteaZero        null.Bytes         `boil:"bytea_zero" json:"bytea_zero,omitempty" toml:"bytea_zero" yaml:"bytea_zero,omitempty"`
	ByteaOne         null.Bytes         `boil:"bytea_one" json:"bytea_one,omitempty" toml:"bytea_one" yaml:"bytea_one,omitempty"`
	ByteaTwo         []byte             `boil:"bytea_two" json:"bytea_two" toml:"bytea_two" yaml:"bytea_two"`
	ByteaThree       []byte             `boil:"bytea_three" json:"bytea_three" toml:"bytea_three" yaml:"bytea_three"`
	ByteaFour        null.Bytes         `boil:"bytea_four" json:"bytea_four,omitempty" toml:"bytea_four" yaml:"bytea_four,omitempty"`
	ByteaFive        []byte             `boil:"bytea_five" json:"bytea_five" toml:"bytea_five" yaml:"bytea_five"`
	ByteaSix         null.Bytes         `boil:"bytea_six" json:"bytea_six,omitempty" toml:"bytea_six" yaml:"bytea_six,omitempty"`
	ByteaSeven       []byte             `boil:"bytea_seven" json:"bytea_seven" toml:"bytea_seven" yaml:"bytea_seven"`
	ByteaEight       []byte             `boil:"bytea_eight" json:"bytea_eight" toml:"bytea_eight" yaml:"bytea_eight"`
	TimeZero         null.Time          `boil:"time_zero" json:"time_zero,omitempty" toml:"time_zero" yaml:"time_zero,omitempty"`
	TimeOne          null.Time          `boil:"time_one" json:"time_one,omitempty" toml:"time_one" yaml:"time_one,omitempty"`
	TimeTwo          null.Time          `boil:"time_two" json:"time_two,omitempty" toml:"time_two" yaml:"time_two,omitempty"`
	TimeThree        null.Time          `boil:"time_three" json:"time_three,omitempty" toml:"time_three" yaml:"time_three,omitempty"`
	TimeFour         time.Time          `boil:"time_four" json:"time_four" toml:"time_four" yaml:"time_four"`
	TimeFive         null.Time          `boil:"time_five" json:"time_five,omitempty" toml:"time_five" yaml:"time_five,omitempty"`
	TimeSix          null.Time          `boil:"time_six" json:"time_six,omitempty" toml:"time_six" yaml:"time_six,omitempty"`
	TimeSeven        null.Time          `boil:"time_seven" json:"time_seven,omitempty" toml:"time_seven" yaml:"time_seven,omitempty"`
	TimeEight        time.Time          `boil:"time_eight" json:"time_eight" toml:"time_eight" yaml:"time_eight"`
	TimeNine         time.Time          `boil:"time_nine" json:"time_nine" toml:"time_nine" yaml:"time_nine"`
	TimeTen          time.Time          `boil:"time_ten" json:"time_ten" toml:"time_ten" yaml:"time_ten"`
	TimeEleven       null.Time          `boil:"time_eleven" json:"time_eleven,omitempty" toml:"time_eleven" yaml:"time_eleven,omitempty"`
	TimeTwelve       time.Time          `boil:"time_twelve" json:"time_twelve" toml:"time_twelve" yaml:"time_twelve"`
	TimeThirteen     null.Time          `boil:"time_thirteen" json:"time_thirteen,omitempty" toml:"time_thirteen" yaml:"time_thirteen,omitempty"`
	TimeFourteen     null.Time          `boil:"time_fourteen" json:"time_fourteen,omitempty" toml:"time_fourteen" yaml:"time_fourteen,omitempty"`
	TimeFifteen      null.Time          `boil:"time_fifteen" json:"time_fifteen,omitempty" toml:"time_fifteen" yaml:"time_fifteen,omitempty"`
	TimeSixteen      time.Time          `boil:"time_sixteen" json:"time_sixteen" toml:"time_sixteen" yaml:"time_sixteen"`
	TimeSeventeen    time.Time          `boil:"time_seventeen" json:"time_seventeen" toml:"time_seventeen" yaml:"time_seventeen"`
	TimeEighteen     time.Time          `boil:"time_eighteen" json:"time_eighteen" toml:"time_eighteen" yaml:"time_eighteen"`
	UUIDZero         null.String        `boil:"uuid_zero" json:"uuid_zero,omitempty" toml:"uuid_zero" yaml:"uuid_zero,omitempty"`
	UUIDOne          null.String        `boil:"uuid_one" json:"uuid_one,omitempty" toml:"uuid_one" yaml:"uuid_one,omitempty"`
	UUIDTwo          null.String        `boil:"uuid_two" json:"uuid_two,omitempty" toml:"uuid_two" yaml:"uuid_two,omitempty"`
	UUIDThree        string             `boil:"uuid_three" json:"uuid_three" toml:"uuid_three" yaml:"uuid_three"`
	UUIDFour         null.String        `boil:"uuid_four" json:"uuid_four,omitempty" toml:"uuid_four" yaml:"uuid_four,omitempty"`
	UUIDFive         string             `boil:"uuid_five" json:"uuid_five" toml:"uuid_five" yaml:"uuid_five"`
	IntegerDefault   null.Int           `boil:"integer_default" json:"integer_default,omitempty" toml:"integer_default" yaml:"integer_default,omitempty"`
	VarcharDefault   null.String        `boil:"varchar_default" json:"varchar_default,omitempty" toml:"varchar_default" yaml:"varchar_default,omitempty"`
	TimestampNotz    null.Time          `boil:"timestamp_notz" json:"timestamp_notz,omitempty" toml:"timestamp_notz" yaml:"timestamp_notz,omitempty"`
	TimestampTZ      null.Time          `boil:"timestamp_tz" json:"timestamp_tz,omitempty" toml:"timestamp_tz" yaml:"timestamp_tz,omitempty"`
	IntervalNnull    string             `boil:"interval_nnull" json:"interval_nnull" toml:"interval_nnull" yaml:"interval_nnull"`
	IntervalNull     null.String        `boil:"interval_null" json:"interval_null,omitempty" toml:"interval_null" yaml:"interval_null,omitempty"`
	JSONNull         null.JSON          `boil:"json_null" json:"json_null,omitempty" toml:"json_null" yaml:"json_null,omitempty"`
	JSONNnull        types.JSON         `boil:"json_nnull" json:"json_nnull" toml:"json_nnull" yaml:"json_nnull"`
	JsonbNull        null.JSON          `boil:"jsonb_null" json:"jsonb_null,omitempty" toml:"jsonb_null" yaml:"jsonb_null,omitempty"`
	JsonbNnull       types.JSON         `boil:"jsonb_nnull" json:"jsonb_nnull" toml:"jsonb_nnull" yaml:"jsonb_nnull"`
	BoxNull          pgeo.NullBox       `boil:"box_null" json:"box_null,omitempty" toml:"box_null" yaml:"box_null,omitempty"`
	BoxNnull         pgeo.Box           `boil:"box_nnull" json:"box_nnull" toml:"box_nnull" yaml:"box_nnull"`
	CidrNull         null.String        `boil:"cidr_null" json:"cidr_null,omitempty" toml:"cidr_null" yaml:"cidr_null,omitempty"`
	CidrNnull        string             `boil:"cidr_nnull" json:"cidr_nnull" toml:"cidr_nnull" yaml:"cidr_nnull"`
	CircleNull       pgeo.NullCircle    `boil:"circle_null" json:"circle_null,omitempty" toml:"circle_null" yaml:"circle_null,omitempty"`
	CircleNnull      pgeo.Circle        `boil:"circle_nnull" json:"circle_nnull" toml:"circle_nnull" yaml:"circle_nnull"`
	DoublePrecNull   null.Float64       `boil:"double_prec_null" json:"double_prec_null,omitempty" toml:"double_prec_null" yaml:"double_prec_null,omitempty"`
	DoublePrecNnull  float64            `boil:"double_prec_nnull" json:"double_prec_nnull" toml:"double_prec_nnull" yaml:"double_prec_nnull"`
	InetNull         null.String        `boil:"inet_null" json:"inet_null,omitempty" toml:"inet_null" yaml:"inet_null,omitempty"`
	InetNnull        string             `boil:"inet_nnull" json:"inet_nnull" toml:"inet_nnull" yaml:"inet_nnull"`
	LineNull         pgeo.NullLine      `boil:"line_null" json:"line_null,omitempty" toml:"line_null" yaml:"line_null,omitempty"`
	LineNnull        pgeo.Line          `boil:"line_nnull" json:"line_nnull" toml:"line_nnull" yaml:"line_nnull"`
	LsegNull         pgeo.NullLseg      `boil:"lseg_null" json:"lseg_null,omitempty" toml:"lseg_null" yaml:"lseg_null,omitempty"`
	LsegNnull        pgeo.Lseg          `boil:"lseg_nnull" json:"lseg_nnull" toml:"lseg_nnull" yaml:"lseg_nnull"`
	MacaddrNull      null.String        `boil:"macaddr_null" json:"macaddr_null,omitempty" toml:"macaddr_null" yaml:"macaddr_null,omitempty"`
	MacaddrNnull     string             `boil:"macaddr_nnull" json:"macaddr_nnull" toml:"macaddr_nnull" yaml:"macaddr_nnull"`
	MoneyNull        null.String        `boil:"money_null" json:"money_null,omitempty" toml:"money_null" yaml:"money_null,omitempty"`
	MoneyNnull       string             `boil:"money_nnull" json:"money_nnull" toml:"money_nnull" yaml:"money_nnull"`
	PathNull         pgeo.NullPath      `boil:"path_null" json:"path_null,omitempty" toml:"path_null" yaml:"path_null,omitempty"`
	PathNnull        pgeo.Path          `boil:"path_nnull" json:"path_nnull" toml:"path_nnull" yaml:"path_nnull"`
	PGLSNNull        null.String        `boil:"pg_lsn_null" json:"pg_lsn_null,omitempty" toml:"pg_lsn_null" yaml:"pg_lsn_null,omitempty"`
	PGLSNNnull       string             `boil:"pg_lsn_nnull" json:"pg_lsn_nnull" toml:"pg_lsn_nnull" yaml:"pg_lsn_nnull"`
	PointNull        pgeo.NullPoint     `boil:"point_null" json:"point_null,omitempty" toml:"point_null" yaml:"point_null,omitempty"`
	PointNnull       pgeo.Point         `boil:"point_nnull" json:"point_nnull" toml:"point_nnull" yaml:"point_nnull"`
	PolygonNull      pgeo.NullPolygon   `boil:"polygon_null" json:"polygon_null,omitempty" toml:"polygon_null" yaml:"polygon_null,omitempty"`
	PolygonNnull     pgeo.Polygon       `boil:"polygon_nnull" json:"polygon_nnull" toml:"polygon_nnull" yaml:"polygon_nnull"`
	TsqueryNull      null.String        `boil:"tsquery_null" json:"tsquery_null,omitempty" toml:"tsquery_null" yaml:"tsquery_null,omitempty"`
	TsqueryNnull     string             `boil:"tsquery_nnull" json:"tsquery_nnull" toml:"tsquery_nnull" yaml:"tsquery_nnull"`
	TsvectorNull     null.String        `boil:"tsvector_null" json:"tsvector_null,omitempty" toml:"tsvector_null" yaml:"tsvector_null,omitempty"`
	TsvectorNnull    string             `boil:"tsvector_nnull" json:"tsvector_nnull" toml:"tsvector_nnull" yaml:"tsvector_nnull"`
	TxidNull         null.String        `boil:"txid_null" json:"txid_null,omitempty" toml:"txid_null" yaml:"txid_null,omitempty"`
	TxidNnull        string             `boil:"txid_nnull" json:"txid_nnull" toml:"txid_nnull" yaml:"txid_nnull"`
	XMLNull          null.String        `boil:"xml_null" json:"xml_null,omitempty" toml:"xml_null" yaml:"xml_null,omitempty"`
	XMLNnull         string             `boil:"xml_nnull" json:"xml_nnull" toml:"xml_nnull" yaml:"xml_nnull"`
	IntarrNull       types.Int64Array   `boil:"intarr_null" json:"intarr_null,omitempty" toml:"intarr_null" yaml:"intarr_null,omitempty"`
	IntarrNnull      types.Int64Array   `boil:"intarr_nnull" json:"intarr_nnull" toml:"intarr_nnull" yaml:"intarr_nnull"`
	BoolarrNull      types.BoolArray    `boil:"boolarr_null" json:"boolarr_null,omitempty" toml:"boolarr_null" yaml:"boolarr_null,omitempty"`
	BoolarrNnull     types.BoolArray    `boil:"boolarr_nnull" json:"boolarr_nnull" toml:"boolarr_nnull" yaml:"boolarr_nnull"`
	VarchararrNull   types.StringArray  `boil:"varchararr_null" json:"varchararr_null,omitempty" toml:"varchararr_null" yaml:"varchararr_null,omitempty"`
	VarchararrNnull  types.StringArray  `boil:"varchararr_nnull" json:"varchararr_nnull" toml:"varchararr_nnull" yaml:"varchararr_nnull"`
	DecimalarrNull   types.DecimalArray `boil:"decimalarr_null" json:"decimalarr_null,omitempty" toml:"decimalarr_null" yaml:"decimalarr_null,omitempty"`
	DecimalarrNnull  types.DecimalArray `boil:"decimalarr_nnull" json:"decimalarr_nnull" toml:"decimalarr_nnull" yaml:"decimalarr_nnull"`
	ByteaarrNull     types.BytesArray   `boil:"byteaarr_null" json:"byteaarr_null,omitempty" toml:"byteaarr_null" yaml:"byteaarr_null,omitempty"`
	ByteaarrNnull    types.BytesArray   `boil:"byteaarr_nnull" json:"byteaarr_nnull" toml:"byteaarr_nnull" yaml:"byteaarr_nnull"`
	JsonbarrNull     types.StringArray  `boil:"jsonbarr_null" json:"jsonbarr_null,omitempty" toml:"jsonbarr_null" yaml:"jsonbarr_null,omitempty"`
	JsonbarrNnull    types.StringArray  `boil:"jsonbarr_nnull" json:"jsonbarr_nnull" toml:"jsonbarr_nnull" yaml:"jsonbarr_nnull"`
	JsonarrNull      types.StringArray  `boil:"jsonarr_null" json:"jsonarr_null,omitempty" toml:"jsonarr_null" yaml:"jsonarr_null,omitempty"`
	JsonarrNnull     types.StringArray  `boil:"jsonarr_nnull" json:"jsonarr_nnull" toml:"jsonarr_nnull" yaml:"jsonarr_nnull"`
	CustomarrNull    types.Int64Array   `boil:"customarr_null" json:"customarr_null,omitempty" toml:"customarr_null" yaml:"customarr_null,omitempty"`
	CustomarrNnull   types.Int64Array   `boil:"customarr_nnull" json:"customarr_nnull" toml:"customarr_nnull" yaml:"customarr_nnull"`
	Domainuint3Nnull types.Decimal      `boil:"domainuint3_nnull" json:"domainuint3_nnull" toml:"domainuint3_nnull" yaml:"domainuint3_nnull"`

	R *typeMonsterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L typeMonsterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TypeMonsterColumns = struct {
	ID               string
	EnumUse          string
	BoolZero         string
	BoolOne          string
	BoolTwo          string
	BoolThree        string
	BoolFour         string
	BoolFive         string
	BoolSix          string
	StringZero       string
	StringOne        string
	StringTwo        string
	StringThree      string
	StringFour       string
	StringFive       string
	StringSix        string
	StringSeven      string
	StringEight      string
	StringNine       string
	StringTen        string
	StringEleven     string
	NonbyteZero      string
	NonbyteOne       string
	NonbyteTwo       string
	NonbyteThree     string
	NonbyteFour      string
	NonbyteFive      string
	NonbyteSix       string
	NonbyteSeven     string
	NonbyteEight     string
	NonbyteNine      string
	ByteZero         string
	ByteOne          string
	ByteTwo          string
	ByteThree        string
	ByteFour         string
	BigIntZero       string
	BigIntOne        string
	BigIntTwo        string
	BigIntThree      string
	BigIntFour       string
	BigIntFive       string
	BigIntSix        string
	IntZero          string
	IntOne           string
	IntTwo           string
	IntThree         string
	IntFour          string
	IntFive          string
	IntSix           string
	FloatZero        string
	FloatOne         string
	FloatTwo         string
	FloatThree       string
	FloatFour        string
	FloatFive        string
	FloatSix         string
	FloatSeven       string
	FloatEight       string
	FloatNine        string
	ByteaZero        string
	ByteaOne         string
	ByteaTwo         string
	ByteaThree       string
	ByteaFour        string
	ByteaFive        string
	ByteaSix         string
	ByteaSeven       string
	ByteaEight       string
	TimeZero         string
	TimeOne          string
	TimeTwo          string
	TimeThree        string
	TimeFour         string
	TimeFive         string
	TimeSix          string
	TimeSeven        string
	TimeEight        string
	TimeNine         string
	TimeTen          string
	TimeEleven       string
	TimeTwelve       string
	TimeThirteen     string
	TimeFourteen     string
	TimeFifteen      string
	TimeSixteen      string
	TimeSeventeen    string
	TimeEighteen     string
	UUIDZero         string
	UUIDOne          string
	UUIDTwo          string
	UUIDThree        string
	UUIDFour         string
	UUIDFive         string
	IntegerDefault   string
	VarcharDefault   string
	TimestampNotz    string
	TimestampTZ      string
	IntervalNnull    string
	IntervalNull     string
	JSONNull         string
	JSONNnull        string
	JsonbNull        string
	JsonbNnull       string
	BoxNull          string
	BoxNnull         string
	CidrNull         string
	CidrNnull        string
	CircleNull       string
	CircleNnull      string
	DoublePrecNull   string
	DoublePrecNnull  string
	InetNull         string
	InetNnull        string
	LineNull         string
	LineNnull        string
	LsegNull         string
	LsegNnull        string
	MacaddrNull      string
	MacaddrNnull     string
	MoneyNull        string
	MoneyNnull       string
	PathNull         string
	PathNnull        string
	PGLSNNull        string
	PGLSNNnull       string
	PointNull        string
	PointNnull       string
	PolygonNull      string
	PolygonNnull     string
	TsqueryNull      string
	TsqueryNnull     string
	TsvectorNull     string
	TsvectorNnull    string
	TxidNull         string
	TxidNnull        string
	XMLNull          string
	XMLNnull         string
	IntarrNull       string
	IntarrNnull      string
	BoolarrNull      string
	BoolarrNnull     string
	VarchararrNull   string
	VarchararrNnull  string
	DecimalarrNull   string
	DecimalarrNnull  string
	ByteaarrNull     string
	ByteaarrNnull    string
	JsonbarrNull     string
	JsonbarrNnull    string
	JsonarrNull      string
	JsonarrNnull     string
	CustomarrNull    string
	CustomarrNnull   string
	Domainuint3Nnull string
}{
	ID:               "id",
	EnumUse:          "enum_use",
	BoolZero:         "bool_zero",
	BoolOne:          "bool_one",
	BoolTwo:          "bool_two",
	BoolThree:        "bool_three",
	BoolFour:         "bool_four",
	BoolFive:         "bool_five",
	BoolSix:          "bool_six",
	StringZero:       "string_zero",
	StringOne:        "string_one",
	StringTwo:        "string_two",
	StringThree:      "string_three",
	StringFour:       "string_four",
	StringFive:       "string_five",
	StringSix:        "string_six",
	StringSeven:      "string_seven",
	StringEight:      "string_eight",
	StringNine:       "string_nine",
	StringTen:        "string_ten",
	StringEleven:     "string_eleven",
	NonbyteZero:      "nonbyte_zero",
	NonbyteOne:       "nonbyte_one",
	NonbyteTwo:       "nonbyte_two",
	NonbyteThree:     "nonbyte_three",
	NonbyteFour:      "nonbyte_four",
	NonbyteFive:      "nonbyte_five",
	NonbyteSix:       "nonbyte_six",
	NonbyteSeven:     "nonbyte_seven",
	NonbyteEight:     "nonbyte_eight",
	NonbyteNine:      "nonbyte_nine",
	ByteZero:         "byte_zero",
	ByteOne:          "byte_one",
	ByteTwo:          "byte_two",
	ByteThree:        "byte_three",
	ByteFour:         "byte_four",
	BigIntZero:       "big_int_zero",
	BigIntOne:        "big_int_one",
	BigIntTwo:        "big_int_two",
	BigIntThree:      "big_int_three",
	BigIntFour:       "big_int_four",
	BigIntFive:       "big_int_five",
	BigIntSix:        "big_int_six",
	IntZero:          "int_zero",
	IntOne:           "int_one",
	IntTwo:           "int_two",
	IntThree:         "int_three",
	IntFour:          "int_four",
	IntFive:          "int_five",
	IntSix:           "int_six",
	FloatZero:        "float_zero",
	FloatOne:         "float_one",
	FloatTwo:         "float_two",
	FloatThree:       "float_three",
	FloatFour:        "float_four",
	FloatFive:        "float_five",
	FloatSix:         "float_six",
	FloatSeven:       "float_seven",
	FloatEight:       "float_eight",
	FloatNine:        "float_nine",
	ByteaZero:        "bytea_zero",
	ByteaOne:         "bytea_one",
	ByteaTwo:         "bytea_two",
	ByteaThree:       "bytea_three",
	ByteaFour:        "bytea_four",
	ByteaFive:        "bytea_five",
	ByteaSix:         "bytea_six",
	ByteaSeven:       "bytea_seven",
	ByteaEight:       "bytea_eight",
	TimeZero:         "time_zero",
	TimeOne:          "time_one",
	TimeTwo:          "time_two",
	TimeThree:        "time_three",
	TimeFour:         "time_four",
	TimeFive:         "time_five",
	TimeSix:          "time_six",
	TimeSeven:        "time_seven",
	TimeEight:        "time_eight",
	TimeNine:         "time_nine",
	TimeTen:          "time_ten",
	TimeEleven:       "time_eleven",
	TimeTwelve:       "time_twelve",
	TimeThirteen:     "time_thirteen",
	TimeFourteen:     "time_fourteen",
	TimeFifteen:      "time_fifteen",
	TimeSixteen:      "time_sixteen",
	TimeSeventeen:    "time_seventeen",
	TimeEighteen:     "time_eighteen",
	UUIDZero:         "uuid_zero",
	UUIDOne:          "uuid_one",
	UUIDTwo:          "uuid_two",
	UUIDThree:        "uuid_three",
	UUIDFour:         "uuid_four",
	UUIDFive:         "uuid_five",
	IntegerDefault:   "integer_default",
	VarcharDefault:   "varchar_default",
	TimestampNotz:    "timestamp_notz",
	TimestampTZ:      "timestamp_tz",
	IntervalNnull:    "interval_nnull",
	IntervalNull:     "interval_null",
	JSONNull:         "json_null",
	JSONNnull:        "json_nnull",
	JsonbNull:        "jsonb_null",
	JsonbNnull:       "jsonb_nnull",
	BoxNull:          "box_null",
	BoxNnull:         "box_nnull",
	CidrNull:         "cidr_null",
	CidrNnull:        "cidr_nnull",
	CircleNull:       "circle_null",
	CircleNnull:      "circle_nnull",
	DoublePrecNull:   "double_prec_null",
	DoublePrecNnull:  "double_prec_nnull",
	InetNull:         "inet_null",
	InetNnull:        "inet_nnull",
	LineNull:         "line_null",
	LineNnull:        "line_nnull",
	LsegNull:         "lseg_null",
	LsegNnull:        "lseg_nnull",
	MacaddrNull:      "macaddr_null",
	MacaddrNnull:     "macaddr_nnull",
	MoneyNull:        "money_null",
	MoneyNnull:       "money_nnull",
	PathNull:         "path_null",
	PathNnull:        "path_nnull",
	PGLSNNull:        "pg_lsn_null",
	PGLSNNnull:       "pg_lsn_nnull",
	PointNull:        "point_null",
	PointNnull:       "point_nnull",
	PolygonNull:      "polygon_null",
	PolygonNnull:     "polygon_nnull",
	TsqueryNull:      "tsquery_null",
	TsqueryNnull:     "tsquery_nnull",
	TsvectorNull:     "tsvector_null",
	TsvectorNnull:    "tsvector_nnull",
	TxidNull:         "txid_null",
	TxidNnull:        "txid_nnull",
	XMLNull:          "xml_null",
	XMLNnull:         "xml_nnull",
	IntarrNull:       "intarr_null",
	IntarrNnull:      "intarr_nnull",
	BoolarrNull:      "boolarr_null",
	BoolarrNnull:     "boolarr_nnull",
	VarchararrNull:   "varchararr_null",
	VarchararrNnull:  "varchararr_nnull",
	DecimalarrNull:   "decimalarr_null",
	DecimalarrNnull:  "decimalarr_nnull",
	ByteaarrNull:     "byteaarr_null",
	ByteaarrNnull:    "byteaarr_nnull",
	JsonbarrNull:     "jsonbarr_null",
	JsonbarrNnull:    "jsonbarr_nnull",
	JsonarrNull:      "jsonarr_null",
	JsonarrNnull:     "jsonarr_nnull",
	CustomarrNull:    "customarr_null",
	CustomarrNnull:   "customarr_nnull",
	Domainuint3Nnull: "domainuint3_nnull",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Byte struct{ field string }

func (w whereHelpernull_Byte) EQ(x null.Byte) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Byte) NEQ(x null.Byte) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Byte) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Byte) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Byte) LT(x null.Byte) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Byte) LTE(x null.Byte) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Byte) GT(x null.Byte) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Byte) GTE(x null.Byte) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_Byte struct{ field string }

func (w whereHelpertypes_Byte) EQ(x types.Byte) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Byte) NEQ(x types.Byte) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Byte) LT(x types.Byte) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Byte) LTE(x types.Byte) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Byte) GT(x types.Byte) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Byte) GTE(x types.Byte) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperpgeo_NullBox struct{ field string }

func (w whereHelperpgeo_NullBox) EQ(x pgeo.NullBox) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperpgeo_NullBox) NEQ(x pgeo.NullBox) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperpgeo_NullBox) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperpgeo_NullBox) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelperpgeo_NullBox) LT(x pgeo.NullBox) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_NullBox) LTE(x pgeo.NullBox) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_NullBox) GT(x pgeo.NullBox) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_NullBox) GTE(x pgeo.NullBox) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperpgeo_Box struct{ field string }

func (w whereHelperpgeo_Box) EQ(x pgeo.Box) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperpgeo_Box) NEQ(x pgeo.Box) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperpgeo_Box) LT(x pgeo.Box) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_Box) LTE(x pgeo.Box) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_Box) GT(x pgeo.Box) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_Box) GTE(x pgeo.Box) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperpgeo_NullCircle struct{ field string }

func (w whereHelperpgeo_NullCircle) EQ(x pgeo.NullCircle) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperpgeo_NullCircle) NEQ(x pgeo.NullCircle) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperpgeo_NullCircle) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperpgeo_NullCircle) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelperpgeo_NullCircle) LT(x pgeo.NullCircle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_NullCircle) LTE(x pgeo.NullCircle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_NullCircle) GT(x pgeo.NullCircle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_NullCircle) GTE(x pgeo.NullCircle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperpgeo_Circle struct{ field string }

func (w whereHelperpgeo_Circle) EQ(x pgeo.Circle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperpgeo_Circle) NEQ(x pgeo.Circle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperpgeo_Circle) LT(x pgeo.Circle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_Circle) LTE(x pgeo.Circle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_Circle) GT(x pgeo.Circle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_Circle) GTE(x pgeo.Circle) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperpgeo_NullLine struct{ field string }

func (w whereHelperpgeo_NullLine) EQ(x pgeo.NullLine) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperpgeo_NullLine) NEQ(x pgeo.NullLine) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperpgeo_NullLine) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperpgeo_NullLine) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelperpgeo_NullLine) LT(x pgeo.NullLine) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_NullLine) LTE(x pgeo.NullLine) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_NullLine) GT(x pgeo.NullLine) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_NullLine) GTE(x pgeo.NullLine) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperpgeo_Line struct{ field string }

func (w whereHelperpgeo_Line) EQ(x pgeo.Line) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperpgeo_Line) NEQ(x pgeo.Line) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperpgeo_Line) LT(x pgeo.Line) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_Line) LTE(x pgeo.Line) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_Line) GT(x pgeo.Line) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_Line) GTE(x pgeo.Line) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperpgeo_NullLseg struct{ field string }

func (w whereHelperpgeo_NullLseg) EQ(x pgeo.NullLseg) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperpgeo_NullLseg) NEQ(x pgeo.NullLseg) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperpgeo_NullLseg) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperpgeo_NullLseg) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelperpgeo_NullLseg) LT(x pgeo.NullLseg) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_NullLseg) LTE(x pgeo.NullLseg) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_NullLseg) GT(x pgeo.NullLseg) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_NullLseg) GTE(x pgeo.NullLseg) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperpgeo_Lseg struct{ field string }

func (w whereHelperpgeo_Lseg) EQ(x pgeo.Lseg) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperpgeo_Lseg) NEQ(x pgeo.Lseg) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperpgeo_Lseg) LT(x pgeo.Lseg) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_Lseg) LTE(x pgeo.Lseg) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_Lseg) GT(x pgeo.Lseg) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_Lseg) GTE(x pgeo.Lseg) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperpgeo_NullPath struct{ field string }

func (w whereHelperpgeo_NullPath) EQ(x pgeo.NullPath) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperpgeo_NullPath) NEQ(x pgeo.NullPath) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperpgeo_NullPath) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperpgeo_NullPath) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelperpgeo_NullPath) LT(x pgeo.NullPath) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_NullPath) LTE(x pgeo.NullPath) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_NullPath) GT(x pgeo.NullPath) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_NullPath) GTE(x pgeo.NullPath) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperpgeo_Path struct{ field string }

func (w whereHelperpgeo_Path) EQ(x pgeo.Path) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperpgeo_Path) NEQ(x pgeo.Path) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperpgeo_Path) LT(x pgeo.Path) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_Path) LTE(x pgeo.Path) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_Path) GT(x pgeo.Path) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_Path) GTE(x pgeo.Path) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperpgeo_NullPoint struct{ field string }

func (w whereHelperpgeo_NullPoint) EQ(x pgeo.NullPoint) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperpgeo_NullPoint) NEQ(x pgeo.NullPoint) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperpgeo_NullPoint) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperpgeo_NullPoint) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelperpgeo_NullPoint) LT(x pgeo.NullPoint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_NullPoint) LTE(x pgeo.NullPoint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_NullPoint) GT(x pgeo.NullPoint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_NullPoint) GTE(x pgeo.NullPoint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperpgeo_Point struct{ field string }

func (w whereHelperpgeo_Point) EQ(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperpgeo_Point) NEQ(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperpgeo_Point) LT(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_Point) LTE(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_Point) GT(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_Point) GTE(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperpgeo_NullPolygon struct{ field string }

func (w whereHelperpgeo_NullPolygon) EQ(x pgeo.NullPolygon) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperpgeo_NullPolygon) NEQ(x pgeo.NullPolygon) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperpgeo_NullPolygon) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperpgeo_NullPolygon) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelperpgeo_NullPolygon) LT(x pgeo.NullPolygon) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_NullPolygon) LTE(x pgeo.NullPolygon) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_NullPolygon) GT(x pgeo.NullPolygon) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_NullPolygon) GTE(x pgeo.NullPolygon) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperpgeo_Polygon struct{ field string }

func (w whereHelperpgeo_Polygon) EQ(x pgeo.Polygon) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperpgeo_Polygon) NEQ(x pgeo.Polygon) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperpgeo_Polygon) LT(x pgeo.Polygon) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_Polygon) LTE(x pgeo.Polygon) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_Polygon) GT(x pgeo.Polygon) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_Polygon) GTE(x pgeo.Polygon) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_Int64Array struct{ field string }

func (w whereHelpertypes_Int64Array) EQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_Int64Array) NEQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_Int64Array) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_Int64Array) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpertypes_Int64Array) LT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Int64Array) LTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Int64Array) GT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Int64Array) GTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_BoolArray struct{ field string }

func (w whereHelpertypes_BoolArray) EQ(x types.BoolArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_BoolArray) NEQ(x types.BoolArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_BoolArray) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_BoolArray) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpertypes_BoolArray) LT(x types.BoolArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_BoolArray) LTE(x types.BoolArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_BoolArray) GT(x types.BoolArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_BoolArray) GTE(x types.BoolArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_DecimalArray struct{ field string }

func (w whereHelpertypes_DecimalArray) EQ(x types.DecimalArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_DecimalArray) NEQ(x types.DecimalArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_DecimalArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_DecimalArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}
func (w whereHelpertypes_DecimalArray) LT(x types.DecimalArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_DecimalArray) LTE(x types.DecimalArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_DecimalArray) GT(x types.DecimalArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_DecimalArray) GTE(x types.DecimalArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_BytesArray struct{ field string }

func (w whereHelpertypes_BytesArray) EQ(x types.BytesArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_BytesArray) NEQ(x types.BytesArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_BytesArray) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_BytesArray) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpertypes_BytesArray) LT(x types.BytesArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_BytesArray) LTE(x types.BytesArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_BytesArray) GT(x types.BytesArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_BytesArray) GTE(x types.BytesArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var TypeMonsterWhere = struct {
	ID               whereHelperint
	EnumUse          whereHelperstring
	BoolZero         whereHelpernull_Bool
	BoolOne          whereHelpernull_Bool
	BoolTwo          whereHelperbool
	BoolThree        whereHelpernull_Bool
	BoolFour         whereHelpernull_Bool
	BoolFive         whereHelperbool
	BoolSix          whereHelperbool
	StringZero       whereHelpernull_String
	StringOne        whereHelpernull_String
	StringTwo        whereHelperstring
	StringThree      whereHelpernull_String
	StringFour       whereHelperstring
	StringFive       whereHelpernull_String
	StringSix        whereHelpernull_String
	StringSeven      whereHelperstring
	StringEight      whereHelpernull_String
	StringNine       whereHelperstring
	StringTen        whereHelpernull_String
	StringEleven     whereHelperstring
	NonbyteZero      whereHelpernull_String
	NonbyteOne       whereHelpernull_String
	NonbyteTwo       whereHelperstring
	NonbyteThree     whereHelpernull_String
	NonbyteFour      whereHelperstring
	NonbyteFive      whereHelpernull_String
	NonbyteSix       whereHelpernull_String
	NonbyteSeven     whereHelperstring
	NonbyteEight     whereHelpernull_String
	NonbyteNine      whereHelperstring
	ByteZero         whereHelpernull_Byte
	ByteOne          whereHelpernull_Byte
	ByteTwo          whereHelpernull_Byte
	ByteThree        whereHelpertypes_Byte
	ByteFour         whereHelpertypes_Byte
	BigIntZero       whereHelpernull_Int64
	BigIntOne        whereHelpernull_Int64
	BigIntTwo        whereHelperint64
	BigIntThree      whereHelpernull_Int64
	BigIntFour       whereHelperint64
	BigIntFive       whereHelpernull_Int64
	BigIntSix        whereHelperint64
	IntZero          whereHelpernull_Int
	IntOne           whereHelpernull_Int
	IntTwo           whereHelperint
	IntThree         whereHelpernull_Int
	IntFour          whereHelperint
	IntFive          whereHelpernull_Int
	IntSix           whereHelperint
	FloatZero        whereHelpertypes_NullDecimal
	FloatOne         whereHelpertypes_NullDecimal
	FloatTwo         whereHelpertypes_NullDecimal
	FloatThree       whereHelpertypes_NullDecimal
	FloatFour        whereHelpertypes_NullDecimal
	FloatFive        whereHelpertypes_Decimal
	FloatSix         whereHelpertypes_NullDecimal
	FloatSeven       whereHelpertypes_Decimal
	FloatEight       whereHelpertypes_NullDecimal
	FloatNine        whereHelpertypes_NullDecimal
	ByteaZero        whereHelpernull_Bytes
	ByteaOne         whereHelpernull_Bytes
	ByteaTwo         whereHelper__byte
	ByteaThree       whereHelper__byte
	ByteaFour        whereHelpernull_Bytes
	ByteaFive        whereHelper__byte
	ByteaSix         whereHelpernull_Bytes
	ByteaSeven       whereHelper__byte
	ByteaEight       whereHelper__byte
	TimeZero         whereHelpernull_Time
	TimeOne          whereHelpernull_Time
	TimeTwo          whereHelpernull_Time
	TimeThree        whereHelpernull_Time
	TimeFour         whereHelpertime_Time
	TimeFive         whereHelpernull_Time
	TimeSix          whereHelpernull_Time
	TimeSeven        whereHelpernull_Time
	TimeEight        whereHelpertime_Time
	TimeNine         whereHelpertime_Time
	TimeTen          whereHelpertime_Time
	TimeEleven       whereHelpernull_Time
	TimeTwelve       whereHelpertime_Time
	TimeThirteen     whereHelpernull_Time
	TimeFourteen     whereHelpernull_Time
	TimeFifteen      whereHelpernull_Time
	TimeSixteen      whereHelpertime_Time
	TimeSeventeen    whereHelpertime_Time
	TimeEighteen     whereHelpertime_Time
	UUIDZero         whereHelpernull_String
	UUIDOne          whereHelpernull_String
	UUIDTwo          whereHelpernull_String
	UUIDThree        whereHelperstring
	UUIDFour         whereHelpernull_String
	UUIDFive         whereHelperstring
	IntegerDefault   whereHelpernull_Int
	VarcharDefault   whereHelpernull_String
	TimestampNotz    whereHelpernull_Time
	TimestampTZ      whereHelpernull_Time
	IntervalNnull    whereHelperstring
	IntervalNull     whereHelpernull_String
	JSONNull         whereHelpernull_JSON
	JSONNnull        whereHelpertypes_JSON
	JsonbNull        whereHelpernull_JSON
	JsonbNnull       whereHelpertypes_JSON
	BoxNull          whereHelperpgeo_NullBox
	BoxNnull         whereHelperpgeo_Box
	CidrNull         whereHelpernull_String
	CidrNnull        whereHelperstring
	CircleNull       whereHelperpgeo_NullCircle
	CircleNnull      whereHelperpgeo_Circle
	DoublePrecNull   whereHelpernull_Float64
	DoublePrecNnull  whereHelperfloat64
	InetNull         whereHelpernull_String
	InetNnull        whereHelperstring
	LineNull         whereHelperpgeo_NullLine
	LineNnull        whereHelperpgeo_Line
	LsegNull         whereHelperpgeo_NullLseg
	LsegNnull        whereHelperpgeo_Lseg
	MacaddrNull      whereHelpernull_String
	MacaddrNnull     whereHelperstring
	MoneyNull        whereHelpernull_String
	MoneyNnull       whereHelperstring
	PathNull         whereHelperpgeo_NullPath
	PathNnull        whereHelperpgeo_Path
	PGLSNNull        whereHelpernull_String
	PGLSNNnull       whereHelperstring
	PointNull        whereHelperpgeo_NullPoint
	PointNnull       whereHelperpgeo_Point
	PolygonNull      whereHelperpgeo_NullPolygon
	PolygonNnull     whereHelperpgeo_Polygon
	TsqueryNull      whereHelpernull_String
	TsqueryNnull     whereHelperstring
	TsvectorNull     whereHelpernull_String
	TsvectorNnull    whereHelperstring
	TxidNull         whereHelpernull_String
	TxidNnull        whereHelperstring
	XMLNull          whereHelpernull_String
	XMLNnull         whereHelperstring
	IntarrNull       whereHelpertypes_Int64Array
	IntarrNnull      whereHelpertypes_Int64Array
	BoolarrNull      whereHelpertypes_BoolArray
	BoolarrNnull     whereHelpertypes_BoolArray
	VarchararrNull   whereHelpertypes_StringArray
	VarchararrNnull  whereHelpertypes_StringArray
	DecimalarrNull   whereHelpertypes_DecimalArray
	DecimalarrNnull  whereHelpertypes_DecimalArray
	ByteaarrNull     whereHelpertypes_BytesArray
	ByteaarrNnull    whereHelpertypes_BytesArray
	JsonbarrNull     whereHelpertypes_StringArray
	JsonbarrNnull    whereHelpertypes_StringArray
	JsonarrNull      whereHelpertypes_StringArray
	JsonarrNnull     whereHelpertypes_StringArray
	CustomarrNull    whereHelpertypes_Int64Array
	CustomarrNnull   whereHelpertypes_Int64Array
	Domainuint3Nnull whereHelpertypes_Decimal
}{
	ID:               whereHelperint{field: "\"type_monsters\".\"id\""},
	EnumUse:          whereHelperstring{field: "\"type_monsters\".\"enum_use\""},
	BoolZero:         whereHelpernull_Bool{field: "\"type_monsters\".\"bool_zero\""},
	BoolOne:          whereHelpernull_Bool{field: "\"type_monsters\".\"bool_one\""},
	BoolTwo:          whereHelperbool{field: "\"type_monsters\".\"bool_two\""},
	BoolThree:        whereHelpernull_Bool{field: "\"type_monsters\".\"bool_three\""},
	BoolFour:         whereHelpernull_Bool{field: "\"type_monsters\".\"bool_four\""},
	BoolFive:         whereHelperbool{field: "\"type_monsters\".\"bool_five\""},
	BoolSix:          whereHelperbool{field: "\"type_monsters\".\"bool_six\""},
	StringZero:       whereHelpernull_String{field: "\"type_monsters\".\"string_zero\""},
	StringOne:        whereHelpernull_String{field: "\"type_monsters\".\"string_one\""},
	StringTwo:        whereHelperstring{field: "\"type_monsters\".\"string_two\""},
	StringThree:      whereHelpernull_String{field: "\"type_monsters\".\"string_three\""},
	StringFour:       whereHelperstring{field: "\"type_monsters\".\"string_four\""},
	StringFive:       whereHelpernull_String{field: "\"type_monsters\".\"string_five\""},
	StringSix:        whereHelpernull_String{field: "\"type_monsters\".\"string_six\""},
	StringSeven:      whereHelperstring{field: "\"type_monsters\".\"string_seven\""},
	StringEight:      whereHelpernull_String{field: "\"type_monsters\".\"string_eight\""},
	StringNine:       whereHelperstring{field: "\"type_monsters\".\"string_nine\""},
	StringTen:        whereHelpernull_String{field: "\"type_monsters\".\"string_ten\""},
	StringEleven:     whereHelperstring{field: "\"type_monsters\".\"string_eleven\""},
	NonbyteZero:      whereHelpernull_String{field: "\"type_monsters\".\"nonbyte_zero\""},
	NonbyteOne:       whereHelpernull_String{field: "\"type_monsters\".\"nonbyte_one\""},
	NonbyteTwo:       whereHelperstring{field: "\"type_monsters\".\"nonbyte_two\""},
	NonbyteThree:     whereHelpernull_String{field: "\"type_monsters\".\"nonbyte_three\""},
	NonbyteFour:      whereHelperstring{field: "\"type_monsters\".\"nonbyte_four\""},
	NonbyteFive:      whereHelpernull_String{field: "\"type_monsters\".\"nonbyte_five\""},
	NonbyteSix:       whereHelpernull_String{field: "\"type_monsters\".\"nonbyte_six\""},
	NonbyteSeven:     whereHelperstring{field: "\"type_monsters\".\"nonbyte_seven\""},
	NonbyteEight:     whereHelpernull_String{field: "\"type_monsters\".\"nonbyte_eight\""},
	NonbyteNine:      whereHelperstring{field: "\"type_monsters\".\"nonbyte_nine\""},
	ByteZero:         whereHelpernull_Byte{field: "\"type_monsters\".\"byte_zero\""},
	ByteOne:          whereHelpernull_Byte{field: "\"type_monsters\".\"byte_one\""},
	ByteTwo:          whereHelpernull_Byte{field: "\"type_monsters\".\"byte_two\""},
	ByteThree:        whereHelpertypes_Byte{field: "\"type_monsters\".\"byte_three\""},
	ByteFour:         whereHelpertypes_Byte{field: "\"type_monsters\".\"byte_four\""},
	BigIntZero:       whereHelpernull_Int64{field: "\"type_monsters\".\"big_int_zero\""},
	BigIntOne:        whereHelpernull_Int64{field: "\"type_monsters\".\"big_int_one\""},
	BigIntTwo:        whereHelperint64{field: "\"type_monsters\".\"big_int_two\""},
	BigIntThree:      whereHelpernull_Int64{field: "\"type_monsters\".\"big_int_three\""},
	BigIntFour:       whereHelperint64{field: "\"type_monsters\".\"big_int_four\""},
	BigIntFive:       whereHelpernull_Int64{field: "\"type_monsters\".\"big_int_five\""},
	BigIntSix:        whereHelperint64{field: "\"type_monsters\".\"big_int_six\""},
	IntZero:          whereHelpernull_Int{field: "\"type_monsters\".\"int_zero\""},
	IntOne:           whereHelpernull_Int{field: "\"type_monsters\".\"int_one\""},
	IntTwo:           whereHelperint{field: "\"type_monsters\".\"int_two\""},
	IntThree:         whereHelpernull_Int{field: "\"type_monsters\".\"int_three\""},
	IntFour:          whereHelperint{field: "\"type_monsters\".\"int_four\""},
	IntFive:          whereHelpernull_Int{field: "\"type_monsters\".\"int_five\""},
	IntSix:           whereHelperint{field: "\"type_monsters\".\"int_six\""},
	FloatZero:        whereHelpertypes_NullDecimal{field: "\"type_monsters\".\"float_zero\""},
	FloatOne:         whereHelpertypes_NullDecimal{field: "\"type_monsters\".\"float_one\""},
	FloatTwo:         whereHelpertypes_NullDecimal{field: "\"type_monsters\".\"float_two\""},
	FloatThree:       whereHelpertypes_NullDecimal{field: "\"type_monsters\".\"float_three\""},
	FloatFour:        whereHelpertypes_NullDecimal{field: "\"type_monsters\".\"float_four\""},
	FloatFive:        whereHelpertypes_Decimal{field: "\"type_monsters\".\"float_five\""},
	FloatSix:         whereHelpertypes_NullDecimal{field: "\"type_monsters\".\"float_six\""},
	FloatSeven:       whereHelpertypes_Decimal{field: "\"type_monsters\".\"float_seven\""},
	FloatEight:       whereHelpertypes_NullDecimal{field: "\"type_monsters\".\"float_eight\""},
	FloatNine:        whereHelpertypes_NullDecimal{field: "\"type_monsters\".\"float_nine\""},
	ByteaZero:        whereHelpernull_Bytes{field: "\"type_monsters\".\"bytea_zero\""},
	ByteaOne:         whereHelpernull_Bytes{field: "\"type_monsters\".\"bytea_one\""},
	ByteaTwo:         whereHelper__byte{field: "\"type_monsters\".\"bytea_two\""},
	ByteaThree:       whereHelper__byte{field: "\"type_monsters\".\"bytea_three\""},
	ByteaFour:        whereHelpernull_Bytes{field: "\"type_monsters\".\"bytea_four\""},
	ByteaFive:        whereHelper__byte{field: "\"type_monsters\".\"bytea_five\""},
	ByteaSix:         whereHelpernull_Bytes{field: "\"type_monsters\".\"bytea_six\""},
	ByteaSeven:       whereHelper__byte{field: "\"type_monsters\".\"bytea_seven\""},
	ByteaEight:       whereHelper__byte{field: "\"type_monsters\".\"bytea_eight\""},
	TimeZero:         whereHelpernull_Time{field: "\"type_monsters\".\"time_zero\""},
	TimeOne:          whereHelpernull_Time{field: "\"type_monsters\".\"time_one\""},
	TimeTwo:          whereHelpernull_Time{field: "\"type_monsters\".\"time_two\""},
	TimeThree:        whereHelpernull_Time{field: "\"type_monsters\".\"time_three\""},
	TimeFour:         whereHelpertime_Time{field: "\"type_monsters\".\"time_four\""},
	TimeFive:         whereHelpernull_Time{field: "\"type_monsters\".\"time_five\""},
	TimeSix:          whereHelpernull_Time{field: "\"type_monsters\".\"time_six\""},
	TimeSeven:        whereHelpernull_Time{field: "\"type_monsters\".\"time_seven\""},
	TimeEight:        whereHelpertime_Time{field: "\"type_monsters\".\"time_eight\""},
	TimeNine:         whereHelpertime_Time{field: "\"type_monsters\".\"time_nine\""},
	TimeTen:          whereHelpertime_Time{field: "\"type_monsters\".\"time_ten\""},
	TimeEleven:       whereHelpernull_Time{field: "\"type_monsters\".\"time_eleven\""},
	TimeTwelve:       whereHelpertime_Time{field: "\"type_monsters\".\"time_twelve\""},
	TimeThirteen:     whereHelpernull_Time{field: "\"type_monsters\".\"time_thirteen\""},
	TimeFourteen:     whereHelpernull_Time{field: "\"type_monsters\".\"time_fourteen\""},
	TimeFifteen:      whereHelpernull_Time{field: "\"type_monsters\".\"time_fifteen\""},
	TimeSixteen:      whereHelpertime_Time{field: "\"type_monsters\".\"time_sixteen\""},
	TimeSeventeen:    whereHelpertime_Time{field: "\"type_monsters\".\"time_seventeen\""},
	TimeEighteen:     whereHelpertime_Time{field: "\"type_monsters\".\"time_eighteen\""},
	UUIDZero:         whereHelpernull_String{field: "\"type_monsters\".\"uuid_zero\""},
	UUIDOne:          whereHelpernull_String{field: "\"type_monsters\".\"uuid_one\""},
	UUIDTwo:          whereHelpernull_String{field: "\"type_monsters\".\"uuid_two\""},
	UUIDThree:        whereHelperstring{field: "\"type_monsters\".\"uuid_three\""},
	UUIDFour:         whereHelpernull_String{field: "\"type_monsters\".\"uuid_four\""},
	UUIDFive:         whereHelperstring{field: "\"type_monsters\".\"uuid_five\""},
	IntegerDefault:   whereHelpernull_Int{field: "\"type_monsters\".\"integer_default\""},
	VarcharDefault:   whereHelpernull_String{field: "\"type_monsters\".\"varchar_default\""},
	TimestampNotz:    whereHelpernull_Time{field: "\"type_monsters\".\"timestamp_notz\""},
	TimestampTZ:      whereHelpernull_Time{field: "\"type_monsters\".\"timestamp_tz\""},
	IntervalNnull:    whereHelperstring{field: "\"type_monsters\".\"interval_nnull\""},
	IntervalNull:     whereHelpernull_String{field: "\"type_monsters\".\"interval_null\""},
	JSONNull:         whereHelpernull_JSON{field: "\"type_monsters\".\"json_null\""},
	JSONNnull:        whereHelpertypes_JSON{field: "\"type_monsters\".\"json_nnull\""},
	JsonbNull:        whereHelpernull_JSON{field: "\"type_monsters\".\"jsonb_null\""},
	JsonbNnull:       whereHelpertypes_JSON{field: "\"type_monsters\".\"jsonb_nnull\""},
	BoxNull:          whereHelperpgeo_NullBox{field: "\"type_monsters\".\"box_null\""},
	BoxNnull:         whereHelperpgeo_Box{field: "\"type_monsters\".\"box_nnull\""},
	CidrNull:         whereHelpernull_String{field: "\"type_monsters\".\"cidr_null\""},
	CidrNnull:        whereHelperstring{field: "\"type_monsters\".\"cidr_nnull\""},
	CircleNull:       whereHelperpgeo_NullCircle{field: "\"type_monsters\".\"circle_null\""},
	CircleNnull:      whereHelperpgeo_Circle{field: "\"type_monsters\".\"circle_nnull\""},
	DoublePrecNull:   whereHelpernull_Float64{field: "\"type_monsters\".\"double_prec_null\""},
	DoublePrecNnull:  whereHelperfloat64{field: "\"type_monsters\".\"double_prec_nnull\""},
	InetNull:         whereHelpernull_String{field: "\"type_monsters\".\"inet_null\""},
	InetNnull:        whereHelperstring{field: "\"type_monsters\".\"inet_nnull\""},
	LineNull:         whereHelperpgeo_NullLine{field: "\"type_monsters\".\"line_null\""},
	LineNnull:        whereHelperpgeo_Line{field: "\"type_monsters\".\"line_nnull\""},
	LsegNull:         whereHelperpgeo_NullLseg{field: "\"type_monsters\".\"lseg_null\""},
	LsegNnull:        whereHelperpgeo_Lseg{field: "\"type_monsters\".\"lseg_nnull\""},
	MacaddrNull:      whereHelpernull_String{field: "\"type_monsters\".\"macaddr_null\""},
	MacaddrNnull:     whereHelperstring{field: "\"type_monsters\".\"macaddr_nnull\""},
	MoneyNull:        whereHelpernull_String{field: "\"type_monsters\".\"money_null\""},
	MoneyNnull:       whereHelperstring{field: "\"type_monsters\".\"money_nnull\""},
	PathNull:         whereHelperpgeo_NullPath{field: "\"type_monsters\".\"path_null\""},
	PathNnull:        whereHelperpgeo_Path{field: "\"type_monsters\".\"path_nnull\""},
	PGLSNNull:        whereHelpernull_String{field: "\"type_monsters\".\"pg_lsn_null\""},
	PGLSNNnull:       whereHelperstring{field: "\"type_monsters\".\"pg_lsn_nnull\""},
	PointNull:        whereHelperpgeo_NullPoint{field: "\"type_monsters\".\"point_null\""},
	PointNnull:       whereHelperpgeo_Point{field: "\"type_monsters\".\"point_nnull\""},
	PolygonNull:      whereHelperpgeo_NullPolygon{field: "\"type_monsters\".\"polygon_null\""},
	PolygonNnull:     whereHelperpgeo_Polygon{field: "\"type_monsters\".\"polygon_nnull\""},
	TsqueryNull:      whereHelpernull_String{field: "\"type_monsters\".\"tsquery_null\""},
	TsqueryNnull:     whereHelperstring{field: "\"type_monsters\".\"tsquery_nnull\""},
	TsvectorNull:     whereHelpernull_String{field: "\"type_monsters\".\"tsvector_null\""},
	TsvectorNnull:    whereHelperstring{field: "\"type_monsters\".\"tsvector_nnull\""},
	TxidNull:         whereHelpernull_String{field: "\"type_monsters\".\"txid_null\""},
	TxidNnull:        whereHelperstring{field: "\"type_monsters\".\"txid_nnull\""},
	XMLNull:          whereHelpernull_String{field: "\"type_monsters\".\"xml_null\""},
	XMLNnull:         whereHelperstring{field: "\"type_monsters\".\"xml_nnull\""},
	IntarrNull:       whereHelpertypes_Int64Array{field: "\"type_monsters\".\"intarr_null\""},
	IntarrNnull:      whereHelpertypes_Int64Array{field: "\"type_monsters\".\"intarr_nnull\""},
	BoolarrNull:      whereHelpertypes_BoolArray{field: "\"type_monsters\".\"boolarr_null\""},
	BoolarrNnull:     whereHelpertypes_BoolArray{field: "\"type_monsters\".\"boolarr_nnull\""},
	VarchararrNull:   whereHelpertypes_StringArray{field: "\"type_monsters\".\"varchararr_null\""},
	VarchararrNnull:  whereHelpertypes_StringArray{field: "\"type_monsters\".\"varchararr_nnull\""},
	DecimalarrNull:   whereHelpertypes_DecimalArray{field: "\"type_monsters\".\"decimalarr_null\""},
	DecimalarrNnull:  whereHelpertypes_DecimalArray{field: "\"type_monsters\".\"decimalarr_nnull\""},
	ByteaarrNull:     whereHelpertypes_BytesArray{field: "\"type_monsters\".\"byteaarr_null\""},
	ByteaarrNnull:    whereHelpertypes_BytesArray{field: "\"type_monsters\".\"byteaarr_nnull\""},
	JsonbarrNull:     whereHelpertypes_StringArray{field: "\"type_monsters\".\"jsonbarr_null\""},
	JsonbarrNnull:    whereHelpertypes_StringArray{field: "\"type_monsters\".\"jsonbarr_nnull\""},
	JsonarrNull:      whereHelpertypes_StringArray{field: "\"type_monsters\".\"jsonarr_null\""},
	JsonarrNnull:     whereHelpertypes_StringArray{field: "\"type_monsters\".\"jsonarr_nnull\""},
	CustomarrNull:    whereHelpertypes_Int64Array{field: "\"type_monsters\".\"customarr_null\""},
	CustomarrNnull:   whereHelpertypes_Int64Array{field: "\"type_monsters\".\"customarr_nnull\""},
	Domainuint3Nnull: whereHelpertypes_Decimal{field: "\"type_monsters\".\"domainuint3_nnull\""},
}

// TypeMonsterRels is where relationship names are stored.
var TypeMonsterRels = struct {
}{}

// typeMonsterR is where relationships are stored.
type typeMonsterR struct {
}

// NewStruct creates a new relationship struct
func (*typeMonsterR) NewStruct() *typeMonsterR {
	return &typeMonsterR{}
}

// typeMonsterL is where Load methods for each relationship are stored.
type typeMonsterL struct{}

var (
	typeMonsterAllColumns            = []string{"id", "enum_use", "bool_zero", "bool_one", "bool_two", "bool_three", "bool_four", "bool_five", "bool_six", "string_zero", "string_one", "string_two", "string_three", "string_four", "string_five", "string_six", "string_seven", "string_eight", "string_nine", "string_ten", "string_eleven", "nonbyte_zero", "nonbyte_one", "nonbyte_two", "nonbyte_three", "nonbyte_four", "nonbyte_five", "nonbyte_six", "nonbyte_seven", "nonbyte_eight", "nonbyte_nine", "byte_zero", "byte_one", "byte_two", "byte_three", "byte_four", "big_int_zero", "big_int_one", "big_int_two", "big_int_three", "big_int_four", "big_int_five", "big_int_six", "int_zero", "int_one", "int_two", "int_three", "int_four", "int_five", "int_six", "float_zero", "float_one", "float_two", "float_three", "float_four", "float_five", "float_six", "float_seven", "float_eight", "float_nine", "bytea_zero", "bytea_one", "bytea_two", "bytea_three", "bytea_four", "bytea_five", "bytea_six", "bytea_seven", "bytea_eight", "time_zero", "time_one", "time_two", "time_three", "time_four", "time_five", "time_six", "time_seven", "time_eight", "time_nine", "time_ten", "time_eleven", "time_twelve", "time_thirteen", "time_fourteen", "time_fifteen", "time_sixteen", "time_seventeen", "time_eighteen", "uuid_zero", "uuid_one", "uuid_two", "uuid_three", "uuid_four", "uuid_five", "integer_default", "varchar_default", "timestamp_notz", "timestamp_tz", "interval_nnull", "interval_null", "json_null", "json_nnull", "jsonb_null", "jsonb_nnull", "box_null", "box_nnull", "cidr_null", "cidr_nnull", "circle_null", "circle_nnull", "double_prec_null", "double_prec_nnull", "inet_null", "inet_nnull", "line_null", "line_nnull", "lseg_null", "lseg_nnull", "macaddr_null", "macaddr_nnull", "money_null", "money_nnull", "path_null", "path_nnull", "pg_lsn_null", "pg_lsn_nnull", "point_null", "point_nnull", "polygon_null", "polygon_nnull", "tsquery_null", "tsquery_nnull", "tsvector_null", "tsvector_nnull", "txid_null", "txid_nnull", "xml_null", "xml_nnull", "intarr_null", "intarr_nnull", "boolarr_null", "boolarr_nnull", "varchararr_null", "varchararr_nnull", "decimalarr_null", "decimalarr_nnull", "byteaarr_null", "byteaarr_nnull", "jsonbarr_null", "jsonbarr_nnull", "jsonarr_null", "jsonarr_nnull", "customarr_null", "customarr_nnull", "domainuint3_nnull"}
	typeMonsterColumnsWithoutDefault = []string{"enum_use", "bool_zero", "bool_one", "bool_two", "string_zero", "string_one", "string_two", "string_five", "string_six", "string_seven", "nonbyte_zero", "nonbyte_one", "nonbyte_two", "nonbyte_five", "nonbyte_six", "nonbyte_seven", "byte_zero", "byte_one", "byte_three", "big_int_zero", "big_int_one", "big_int_two", "int_zero", "int_one", "int_two", "float_zero", "float_one", "float_two", "float_three", "float_four", "float_five", "bytea_zero", "bytea_one", "bytea_two", "time_zero", "time_one", "time_two", "time_three", "time_four", "time_eleven", "time_twelve", "uuid_zero", "uuid_one", "uuid_two", "uuid_three", "json_null", "json_nnull", "jsonb_null", "jsonb_nnull", "box_null", "box_nnull", "cidr_null", "cidr_nnull", "circle_null", "circle_nnull", "double_prec_null", "double_prec_nnull", "inet_null", "inet_nnull", "line_null", "line_nnull", "lseg_null", "lseg_nnull", "macaddr_null", "macaddr_nnull", "money_null", "money_nnull", "path_null", "path_nnull", "pg_lsn_null", "pg_lsn_nnull", "point_null", "point_nnull", "polygon_null", "polygon_nnull", "tsquery_null", "tsquery_nnull", "tsvector_null", "tsvector_nnull", "txid_null", "txid_nnull", "xml_null", "xml_nnull", "intarr_null", "intarr_nnull", "boolarr_null", "boolarr_nnull", "varchararr_null", "varchararr_nnull", "decimalarr_null", "decimalarr_nnull", "byteaarr_null", "byteaarr_nnull", "jsonbarr_null", "jsonbarr_nnull", "jsonarr_null", "jsonarr_nnull", "customarr_null", "customarr_nnull", "domainuint3_nnull"}
	typeMonsterColumnsWithDefault    = []string{"id", "bool_three", "bool_four", "bool_five", "bool_six", "string_three", "string_four", "string_eight", "string_nine", "string_ten", "string_eleven", "nonbyte_three", "nonbyte_four", "nonbyte_eight", "nonbyte_nine", "byte_two", "byte_four", "big_int_three", "big_int_four", "big_int_five", "big_int_six", "int_three", "int_four", "int_five", "int_six", "float_six", "float_seven", "float_eight", "float_nine", "bytea_three", "bytea_four", "bytea_five", "bytea_six", "bytea_seven", "bytea_eight", "time_five", "time_six", "time_seven", "time_eight", "time_nine", "time_ten", "time_thirteen", "time_fourteen", "time_fifteen", "time_sixteen", "time_seventeen", "time_eighteen", "uuid_four", "uuid_five", "integer_default", "varchar_default", "timestamp_notz", "timestamp_tz", "interval_nnull", "interval_null"}
	typeMonsterPrimaryKeyColumns     = []string{"id"}
)

type (
	// TypeMonsterSlice is an alias for a slice of pointers to TypeMonster.
	// This should generally be used opposed to []TypeMonster.
	TypeMonsterSlice []*TypeMonster

	typeMonsterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	typeMonsterType                 = reflect.TypeOf(&TypeMonster{})
	typeMonsterMapping              = queries.MakeStructMapping(typeMonsterType)
	typeMonsterPrimaryKeyMapping, _ = queries.BindMapping(typeMonsterType, typeMonsterMapping, typeMonsterPrimaryKeyColumns)
	typeMonsterInsertCacheMut       sync.RWMutex
	typeMonsterInsertCache          = make(map[string]insertCache)
	typeMonsterUpdateCacheMut       sync.RWMutex
	typeMonsterUpdateCache          = make(map[string]updateCache)
	typeMonsterUpsertCacheMut       sync.RWMutex
	typeMonsterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single typeMonster record from the query.
func (q typeMonsterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TypeMonster, error) {
	o := &TypeMonster{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for type_monsters")
	}

	return o, nil
}

// All returns all TypeMonster records from the query.
func (q typeMonsterQuery) All(ctx context.Context, exec boil.ContextExecutor) (TypeMonsterSlice, error) {
	var o []*TypeMonster

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TypeMonster slice")
	}

	return o, nil
}

// Count returns the count of all TypeMonster records in the query.
func (q typeMonsterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count type_monsters rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q typeMonsterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if type_monsters exists")
	}

	return count > 0, nil
}

// TypeMonsters retrieves all the records using an executor.
func TypeMonsters(mods ...qm.QueryMod) typeMonsterQuery {
	mods = append(mods, qm.From("\"type_monsters\""))
	return typeMonsterQuery{NewQuery(mods...)}
}

// FindTypeMonster retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTypeMonster(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TypeMonster, error) {
	typeMonsterObj := &TypeMonster{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"type_monsters\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, typeMonsterObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from type_monsters")
	}

	return typeMonsterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TypeMonster) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no type_monsters provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(typeMonsterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	typeMonsterInsertCacheMut.RLock()
	cache, cached := typeMonsterInsertCache[key]
	typeMonsterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			typeMonsterAllColumns,
			typeMonsterColumnsWithDefault,
			typeMonsterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(typeMonsterType, typeMonsterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(typeMonsterType, typeMonsterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"type_monsters\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"type_monsters\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into type_monsters")
	}

	if !cached {
		typeMonsterInsertCacheMut.Lock()
		typeMonsterInsertCache[key] = cache
		typeMonsterInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TypeMonster.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TypeMonster) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	typeMonsterUpdateCacheMut.RLock()
	cache, cached := typeMonsterUpdateCache[key]
	typeMonsterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			typeMonsterAllColumns,
			typeMonsterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update type_monsters, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"type_monsters\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, typeMonsterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(typeMonsterType, typeMonsterMapping, append(wl, typeMonsterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update type_monsters row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for type_monsters")
	}

	if !cached {
		typeMonsterUpdateCacheMut.Lock()
		typeMonsterUpdateCache[key] = cache
		typeMonsterUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q typeMonsterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for type_monsters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for type_monsters")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TypeMonsterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), typeMonsterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"type_monsters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, typeMonsterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in typeMonster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all typeMonster")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TypeMonster) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no type_monsters provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(typeMonsterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	typeMonsterUpsertCacheMut.RLock()
	cache, cached := typeMonsterUpsertCache[key]
	typeMonsterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			typeMonsterAllColumns,
			typeMonsterColumnsWithDefault,
			typeMonsterColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			typeMonsterAllColumns,
			typeMonsterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert type_monsters, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(typeMonsterPrimaryKeyColumns))
			copy(conflict, typeMonsterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"type_monsters\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(typeMonsterType, typeMonsterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(typeMonsterType, typeMonsterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert type_monsters")
	}

	if !cached {
		typeMonsterUpsertCacheMut.Lock()
		typeMonsterUpsertCache[key] = cache
		typeMonsterUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TypeMonster record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TypeMonster) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TypeMonster provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), typeMonsterPrimaryKeyMapping)
	sql := "DELETE FROM \"type_monsters\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from type_monsters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for type_monsters")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q typeMonsterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no typeMonsterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from type_monsters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for type_monsters")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TypeMonsterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), typeMonsterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"type_monsters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, typeMonsterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from typeMonster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for type_monsters")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TypeMonster) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTypeMonster(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TypeMonsterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TypeMonsterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), typeMonsterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"type_monsters\".* FROM \"type_monsters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, typeMonsterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TypeMonsterSlice")
	}

	*o = slice

	return nil
}

// TypeMonsterExists checks if the TypeMonster row exists.
func TypeMonsterExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"type_monsters\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if type_monsters exists")
	}

	return exists, nil
}
