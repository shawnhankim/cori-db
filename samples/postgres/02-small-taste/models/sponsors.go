// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Sponsor is an object representing the database table.
type Sponsor struct {
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *sponsorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sponsorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SponsorColumns = struct {
	ID string
}{
	ID: "id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var SponsorWhere = struct {
	ID whereHelperint
}{
	ID: whereHelperint{field: "\"sponsors\".\"id\""},
}

// SponsorRels is where relationship names are stored.
var SponsorRels = struct {
	Video string
}{
	Video: "Video",
}

// sponsorR is where relationships are stored.
type sponsorR struct {
	Video *Video `boil:"Video" json:"Video" toml:"Video" yaml:"Video"`
}

// NewStruct creates a new relationship struct
func (*sponsorR) NewStruct() *sponsorR {
	return &sponsorR{}
}

// sponsorL is where Load methods for each relationship are stored.
type sponsorL struct{}

var (
	sponsorAllColumns            = []string{"id"}
	sponsorColumnsWithoutDefault = []string{}
	sponsorColumnsWithDefault    = []string{"id"}
	sponsorPrimaryKeyColumns     = []string{"id"}
)

type (
	// SponsorSlice is an alias for a slice of pointers to Sponsor.
	// This should generally be used opposed to []Sponsor.
	SponsorSlice []*Sponsor

	sponsorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sponsorType                 = reflect.TypeOf(&Sponsor{})
	sponsorMapping              = queries.MakeStructMapping(sponsorType)
	sponsorPrimaryKeyMapping, _ = queries.BindMapping(sponsorType, sponsorMapping, sponsorPrimaryKeyColumns)
	sponsorInsertCacheMut       sync.RWMutex
	sponsorInsertCache          = make(map[string]insertCache)
	sponsorUpdateCacheMut       sync.RWMutex
	sponsorUpdateCache          = make(map[string]updateCache)
	sponsorUpsertCacheMut       sync.RWMutex
	sponsorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single sponsor record from the query.
func (q sponsorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Sponsor, error) {
	o := &Sponsor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sponsors")
	}

	return o, nil
}

// All returns all Sponsor records from the query.
func (q sponsorQuery) All(ctx context.Context, exec boil.ContextExecutor) (SponsorSlice, error) {
	var o []*Sponsor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Sponsor slice")
	}

	return o, nil
}

// Count returns the count of all Sponsor records in the query.
func (q sponsorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sponsors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sponsorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sponsors exists")
	}

	return count > 0, nil
}

// Video pointed to by the foreign key.
func (o *Sponsor) Video(mods ...qm.QueryMod) videoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"sponsor_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Videos(queryMods...)
	queries.SetFrom(query.Query, "\"videos\"")

	return query
}

// LoadVideo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (sponsorL) LoadVideo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSponsor interface{}, mods queries.Applicator) error {
	var slice []*Sponsor
	var object *Sponsor

	if singular {
		object = maybeSponsor.(*Sponsor)
	} else {
		slice = *maybeSponsor.(*[]*Sponsor)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sponsorR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sponsorR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`videos`),
		qm.WhereIn(`videos.sponsor_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Video")
	}

	var resultSlice []*Video
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Video")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for videos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for videos")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Video = foreign
		if foreign.R == nil {
			foreign.R = &videoR{}
		}
		foreign.R.Sponsor = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.SponsorID) {
				local.R.Video = foreign
				if foreign.R == nil {
					foreign.R = &videoR{}
				}
				foreign.R.Sponsor = local
				break
			}
		}
	}

	return nil
}

// SetVideo of the sponsor to the related item.
// Sets o.R.Video to related.
// Adds o to related.R.Sponsor.
func (o *Sponsor) SetVideo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Video) error {
	var err error

	if insert {
		queries.Assign(&related.SponsorID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"videos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"sponsor_id"}),
			strmangle.WhereClause("\"", "\"", 2, videoPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.SponsorID, o.ID)
	}

	if o.R == nil {
		o.R = &sponsorR{
			Video: related,
		}
	} else {
		o.R.Video = related
	}

	if related.R == nil {
		related.R = &videoR{
			Sponsor: o,
		}
	} else {
		related.R.Sponsor = o
	}
	return nil
}

// RemoveVideo relationship.
// Sets o.R.Video to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Sponsor) RemoveVideo(ctx context.Context, exec boil.ContextExecutor, related *Video) error {
	var err error

	queries.SetScanner(&related.SponsorID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("sponsor_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Video = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.Sponsor = nil
	return nil
}

// Sponsors retrieves all the records using an executor.
func Sponsors(mods ...qm.QueryMod) sponsorQuery {
	mods = append(mods, qm.From("\"sponsors\""))
	return sponsorQuery{NewQuery(mods...)}
}

// FindSponsor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSponsor(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Sponsor, error) {
	sponsorObj := &Sponsor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sponsors\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sponsorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sponsors")
	}

	return sponsorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Sponsor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sponsors provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(sponsorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sponsorInsertCacheMut.RLock()
	cache, cached := sponsorInsertCache[key]
	sponsorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sponsorAllColumns,
			sponsorColumnsWithDefault,
			sponsorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sponsorType, sponsorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sponsorType, sponsorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sponsors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sponsors\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sponsors")
	}

	if !cached {
		sponsorInsertCacheMut.Lock()
		sponsorInsertCache[key] = cache
		sponsorInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Sponsor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Sponsor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	sponsorUpdateCacheMut.RLock()
	cache, cached := sponsorUpdateCache[key]
	sponsorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sponsorAllColumns,
			sponsorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sponsors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sponsors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sponsorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sponsorType, sponsorMapping, append(wl, sponsorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sponsors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sponsors")
	}

	if !cached {
		sponsorUpdateCacheMut.Lock()
		sponsorUpdateCache[key] = cache
		sponsorUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q sponsorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sponsors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sponsors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SponsorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sponsorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sponsors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sponsorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sponsor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sponsor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Sponsor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sponsors provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(sponsorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sponsorUpsertCacheMut.RLock()
	cache, cached := sponsorUpsertCache[key]
	sponsorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sponsorAllColumns,
			sponsorColumnsWithDefault,
			sponsorColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sponsorAllColumns,
			sponsorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sponsors, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sponsorPrimaryKeyColumns))
			copy(conflict, sponsorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sponsors\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sponsorType, sponsorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sponsorType, sponsorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sponsors")
	}

	if !cached {
		sponsorUpsertCacheMut.Lock()
		sponsorUpsertCache[key] = cache
		sponsorUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Sponsor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Sponsor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Sponsor provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sponsorPrimaryKeyMapping)
	sql := "DELETE FROM \"sponsors\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sponsors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sponsors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sponsorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sponsorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sponsors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sponsors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SponsorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sponsorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sponsors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sponsorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sponsor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sponsors")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Sponsor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSponsor(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SponsorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SponsorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sponsorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sponsors\".* FROM \"sponsors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sponsorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SponsorSlice")
	}

	*o = slice

	return nil
}

// SponsorExists checks if the Sponsor row exists.
func SponsorExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sponsors\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sponsors exists")
	}

	return exists, nil
}
