// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Video is an object representing the database table.
type Video struct {
	ID        int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    int      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	SponsorID null.Int `boil:"sponsor_id" json:"sponsor_id,omitempty" toml:"sponsor_id" yaml:"sponsor_id,omitempty"`

	R *videoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L videoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VideoColumns = struct {
	ID        string
	UserID    string
	SponsorID string
}{
	ID:        "id",
	UserID:    "user_id",
	SponsorID: "sponsor_id",
}

// Generated where

var VideoWhere = struct {
	ID        whereHelperint
	UserID    whereHelperint
	SponsorID whereHelpernull_Int
}{
	ID:        whereHelperint{field: "\"videos\".\"id\""},
	UserID:    whereHelperint{field: "\"videos\".\"user_id\""},
	SponsorID: whereHelpernull_Int{field: "\"videos\".\"sponsor_id\""},
}

// VideoRels is where relationship names are stored.
var VideoRels = struct {
	Sponsor string
	User    string
	Tags    string
}{
	Sponsor: "Sponsor",
	User:    "User",
	Tags:    "Tags",
}

// videoR is where relationships are stored.
type videoR struct {
	Sponsor *Sponsor `boil:"Sponsor" json:"Sponsor" toml:"Sponsor" yaml:"Sponsor"`
	User    *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
	Tags    TagSlice `boil:"Tags" json:"Tags" toml:"Tags" yaml:"Tags"`
}

// NewStruct creates a new relationship struct
func (*videoR) NewStruct() *videoR {
	return &videoR{}
}

// videoL is where Load methods for each relationship are stored.
type videoL struct{}

var (
	videoAllColumns            = []string{"id", "user_id", "sponsor_id"}
	videoColumnsWithoutDefault = []string{"user_id", "sponsor_id"}
	videoColumnsWithDefault    = []string{"id"}
	videoPrimaryKeyColumns     = []string{"id"}
)

type (
	// VideoSlice is an alias for a slice of pointers to Video.
	// This should generally be used opposed to []Video.
	VideoSlice []*Video

	videoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	videoType                 = reflect.TypeOf(&Video{})
	videoMapping              = queries.MakeStructMapping(videoType)
	videoPrimaryKeyMapping, _ = queries.BindMapping(videoType, videoMapping, videoPrimaryKeyColumns)
	videoInsertCacheMut       sync.RWMutex
	videoInsertCache          = make(map[string]insertCache)
	videoUpdateCacheMut       sync.RWMutex
	videoUpdateCache          = make(map[string]updateCache)
	videoUpsertCacheMut       sync.RWMutex
	videoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single video record from the query.
func (q videoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Video, error) {
	o := &Video{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for videos")
	}

	return o, nil
}

// All returns all Video records from the query.
func (q videoQuery) All(ctx context.Context, exec boil.ContextExecutor) (VideoSlice, error) {
	var o []*Video

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Video slice")
	}

	return o, nil
}

// Count returns the count of all Video records in the query.
func (q videoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count videos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q videoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if videos exists")
	}

	return count > 0, nil
}

// Sponsor pointed to by the foreign key.
func (o *Video) Sponsor(mods ...qm.QueryMod) sponsorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SponsorID),
	}

	queryMods = append(queryMods, mods...)

	query := Sponsors(queryMods...)
	queries.SetFrom(query.Query, "\"sponsors\"")

	return query
}

// User pointed to by the foreign key.
func (o *Video) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Tags retrieves all the tag's Tags with an executor.
func (o *Video) Tags(mods ...qm.QueryMod) tagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"video_tags\" on \"tags\".\"id\" = \"video_tags\".\"tag_id\""),
		qm.Where("\"video_tags\".\"video_id\"=?", o.ID),
	)

	query := Tags(queryMods...)
	queries.SetFrom(query.Query, "\"tags\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tags\".*"})
	}

	return query
}

// LoadSponsor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (videoL) LoadSponsor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVideo interface{}, mods queries.Applicator) error {
	var slice []*Video
	var object *Video

	if singular {
		object = maybeVideo.(*Video)
	} else {
		slice = *maybeVideo.(*[]*Video)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &videoR{}
		}
		if !queries.IsNil(object.SponsorID) {
			args = append(args, object.SponsorID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &videoR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SponsorID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SponsorID) {
				args = append(args, obj.SponsorID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sponsors`),
		qm.WhereIn(`sponsors.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sponsor")
	}

	var resultSlice []*Sponsor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sponsor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sponsors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sponsors")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sponsor = foreign
		if foreign.R == nil {
			foreign.R = &sponsorR{}
		}
		foreign.R.Video = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SponsorID, foreign.ID) {
				local.R.Sponsor = foreign
				if foreign.R == nil {
					foreign.R = &sponsorR{}
				}
				foreign.R.Video = local
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (videoL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVideo interface{}, mods queries.Applicator) error {
	var slice []*Video
	var object *Video

	if singular {
		object = maybeVideo.(*Video)
	} else {
		slice = *maybeVideo.(*[]*Video)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &videoR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &videoR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Videos = append(foreign.R.Videos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Videos = append(foreign.R.Videos, local)
				break
			}
		}
	}

	return nil
}

// LoadTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (videoL) LoadTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVideo interface{}, mods queries.Applicator) error {
	var slice []*Video
	var object *Video

	if singular {
		object = maybeVideo.(*Video)
	} else {
		slice = *maybeVideo.(*[]*Video)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &videoR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &videoR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"tags\".id, \"a\".\"video_id\""),
		qm.From("\"tags\""),
		qm.InnerJoin("\"video_tags\" as \"a\" on \"tags\".\"id\" = \"a\".\"tag_id\""),
		qm.WhereIn("\"a\".\"video_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tags")
	}

	var resultSlice []*Tag

	var localJoinCols []int
	for results.Next() {
		one := new(Tag)
		var localJoinCol int

		err = results.Scan(&one.ID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for tags")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice tags")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tags")
	}

	if singular {
		object.R.Tags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tagR{}
			}
			foreign.R.Videos = append(foreign.R.Videos, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Tags = append(local.R.Tags, foreign)
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.Videos = append(foreign.R.Videos, local)
				break
			}
		}
	}

	return nil
}

// SetSponsor of the video to the related item.
// Sets o.R.Sponsor to related.
// Adds o to related.R.Video.
func (o *Video) SetSponsor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Sponsor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"videos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sponsor_id"}),
		strmangle.WhereClause("\"", "\"", 2, videoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SponsorID, related.ID)
	if o.R == nil {
		o.R = &videoR{
			Sponsor: related,
		}
	} else {
		o.R.Sponsor = related
	}

	if related.R == nil {
		related.R = &sponsorR{
			Video: o,
		}
	} else {
		related.R.Video = o
	}

	return nil
}

// RemoveSponsor relationship.
// Sets o.R.Sponsor to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Video) RemoveSponsor(ctx context.Context, exec boil.ContextExecutor, related *Sponsor) error {
	var err error

	queries.SetScanner(&o.SponsorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("sponsor_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Sponsor = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.Video = nil
	return nil
}

// SetUser of the video to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Videos.
func (o *Video) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"videos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, videoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &videoR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Videos: VideoSlice{o},
		}
	} else {
		related.R.Videos = append(related.R.Videos, o)
	}

	return nil
}

// AddTags adds the given related objects to the existing relationships
// of the video, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.Videos appropriately.
func (o *Video) AddTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tag) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"video_tags\" (\"video_id\", \"tag_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &videoR{
			Tags: related,
		}
	} else {
		o.R.Tags = append(o.R.Tags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagR{
				Videos: VideoSlice{o},
			}
		} else {
			rel.R.Videos = append(rel.R.Videos, o)
		}
	}
	return nil
}

// SetTags removes all previously related items of the
// video replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Videos's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.Videos's Tags accordingly.
func (o *Video) SetTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tag) error {
	query := "delete from \"video_tags\" where \"video_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTagsFromVideosSlice(o, related)
	if o.R != nil {
		o.R.Tags = nil
	}
	return o.AddTags(ctx, exec, insert, related...)
}

// RemoveTags relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.Videos.
func (o *Video) RemoveTags(ctx context.Context, exec boil.ContextExecutor, related ...*Tag) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"video_tags\" where \"video_id\" = $1 and \"tag_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTagsFromVideosSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Tags {
			if rel != ri {
				continue
			}

			ln := len(o.R.Tags)
			if ln > 1 && i < ln-1 {
				o.R.Tags[i] = o.R.Tags[ln-1]
			}
			o.R.Tags = o.R.Tags[:ln-1]
			break
		}
	}

	return nil
}

func removeTagsFromVideosSlice(o *Video, related []*Tag) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Videos {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Videos)
			if ln > 1 && i < ln-1 {
				rel.R.Videos[i] = rel.R.Videos[ln-1]
			}
			rel.R.Videos = rel.R.Videos[:ln-1]
			break
		}
	}
}

// Videos retrieves all the records using an executor.
func Videos(mods ...qm.QueryMod) videoQuery {
	mods = append(mods, qm.From("\"videos\""))
	return videoQuery{NewQuery(mods...)}
}

// FindVideo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVideo(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Video, error) {
	videoObj := &Video{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"videos\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, videoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from videos")
	}

	return videoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Video) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no videos provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(videoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	videoInsertCacheMut.RLock()
	cache, cached := videoInsertCache[key]
	videoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			videoAllColumns,
			videoColumnsWithDefault,
			videoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(videoType, videoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(videoType, videoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"videos\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"videos\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into videos")
	}

	if !cached {
		videoInsertCacheMut.Lock()
		videoInsertCache[key] = cache
		videoInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Video.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Video) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	videoUpdateCacheMut.RLock()
	cache, cached := videoUpdateCache[key]
	videoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			videoAllColumns,
			videoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update videos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"videos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, videoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(videoType, videoMapping, append(wl, videoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update videos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for videos")
	}

	if !cached {
		videoUpdateCacheMut.Lock()
		videoUpdateCache[key] = cache
		videoUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q videoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for videos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for videos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VideoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"videos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, videoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in video slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all video")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Video) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no videos provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(videoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	videoUpsertCacheMut.RLock()
	cache, cached := videoUpsertCache[key]
	videoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			videoAllColumns,
			videoColumnsWithDefault,
			videoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			videoAllColumns,
			videoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert videos, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(videoPrimaryKeyColumns))
			copy(conflict, videoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"videos\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(videoType, videoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(videoType, videoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert videos")
	}

	if !cached {
		videoUpsertCacheMut.Lock()
		videoUpsertCache[key] = cache
		videoUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Video record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Video) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Video provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), videoPrimaryKeyMapping)
	sql := "DELETE FROM \"videos\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from videos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for videos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q videoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no videoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from videos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for videos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VideoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"videos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, videoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from video slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for videos")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Video) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVideo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VideoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VideoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), videoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"videos\".* FROM \"videos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, videoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VideoSlice")
	}

	*o = slice

	return nil
}

// VideoExists checks if the Video row exists.
func VideoExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"videos\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if videos exists")
	}

	return exists, nil
}
